package br.org.pti.basi.domain.controller;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.Parameter;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import br.org.pti.basi.domain.entity.Tipologia;
import br.org.pti.basi.domain.service.TipologiaService;

@RestController
@RequestMapping(value = "/api/teste")
public class TesteController {

	/**
	 * 
	 */
	@Autowired
    private TipologiaService tipologiaService;

	/**
	 * 
	 * @param filters
	 * @param pageable
	 * @return
	 */
    @GetMapping
    public Page<Tipologia> listTipologiasByFilters( String filter, Pageable pageable ) {
        return this.tipologiaService.listTipologiasByFilters( filter, pageable );
    }

    /**
     * 
     * @return
     * @throws Exception 
     */
	@GetMapping("/methods")
	public String listParams( @RequestParam(value = "subject", required = false) Long subjectId,HttpServletRequest request ) throws Exception {
		
		StringBuilder sb = new StringBuilder();
		Method[] declaredMethods = this.tipologiaService.getClass().getDeclaredMethods();
		
		for (Method declaredMethod : declaredMethods) {
			System.out.println(declaredMethod.toGenericString());
			if (Modifier.isPrivate(declaredMethod.getModifiers())) continue;
			sb.append(declaredMethod.getName()+"(");
			for (Parameter param : declaredMethod.getParameters()) {
	        	sb.append(param.getName()+">,");
	        }
			sb.append(")<br>");
		}
		
		
		/*Enumeration<String> x = request.getParameterNames();
		while ( x.hasMoreElements()) {
			sb.append(x.nextElement());
			//x.nextElement();
		}*/
		       
		
		
		return sb.toString();

	}
    
    
    /**
     * 
     * @param id
     * @return
     */
    /*@GetMapping("/{id}")
    public Usuario findTipologiaById(@PathVariable long id) {
        return this.tipologiaService.findUsuarioById( id );
    }*/

//    /**
//     * 
//     * @param usuario
//     * @return
//     */
//    @PostMapping
//    public Usuario insertUsuario(@RequestBody final Usuario usuario) {
//    	return this.usuarioService.insertUsuario( usuario );
//    }
//
//    /**
//     * 
//     * @param id
//     * @param usuario
//     * @return
//     */
//    @PutMapping("/{id}")
//    public Usuario updateUsuario(@PathVariable long id, @RequestBody Usuario usuario) {
//        return this.usuarioService.updateUsuario( usuario );
//    }
//
//    /**
//     * 
//     * @param id
//     */
//    @DeleteMapping("/{id}")
//    public void deleteUsuario(@PathVariable long id) {
//        this.usuarioService.deleteUsuario( id );
//    }
//    
//    /**
//     * 
//     * @return
//     */
//	@GetMapping("/enum/perfil")
//	public Perfil[] listEnumPerfis()
//	{
//		return Perfil.values();
//	}
}
